<Window x:Class="IMX.ATS.DIOS.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:IMX.ATS.DIOS" 
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
        xmlns:converter="clr-namespace:IMX.ATS.DIOS.Resource.Converter"
        d:DataContext="{d:DesignInstance Type=local:MainWindowModel}"
        mc:Ignorable="d"
        Title="数据查询" Height="450" Width="800" Name="Win" WindowStyle="None">
    <Window.Resources>
        <ResourceDictionary>
        <!--设置按钮控件-->
        <Style TargetType="Button" x:Key="SettingButtonStyle">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent" Height="50" Name="back">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{TemplateBinding Content}" 
                                       VerticalAlignment="Center" HorizontalAlignment="Center" 
                                       Foreground="White"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#11FFFFFF" TargetName="back"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--窗口大小恢复控件-->
        <Style TargetType="Button" x:Key="ControlButtonStyle">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="Transparent" Height="30" Width="45" Name="back">
                            <Border Name="hover" Background="{TemplateBinding Background}" Visibility="Collapsed"/>
                            <TextBlock Text="{TemplateBinding Content}" FontFamily="{StaticResource iconfont}" 
                                       VerticalAlignment="Center" HorizontalAlignment="Center" Name="txt"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Visibility" Value="Visible" TargetName="hover"/>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{Binding Tag,RelativeSource={RelativeSource Mode=Self}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--窗口关闭控件-->
        <ControlTemplate TargetType="Button" x:Key="CloseButtonTemplate">
            <Grid Background="Transparent" Name="back">
                <TextBlock Text="&#xe67d;" 
                           VerticalAlignment="Center" HorizontalAlignment="Center"
                           FontSize="14"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#DDD" TargetName="back"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--自定义下拉框-->
        <!-- 定义ComboBoxTextBox的样式模板 -->
        <Style x:Key="ComboBoxTextBox" TargetType="TextBox">
            <Setter Property="Width" Value="120"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="5 0 0 0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="Foreground" Value="Black"/>
        </Style>
        <Style x:Key="ComboboxItemStyle" TargetType="ComboBoxItem">
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="Foreground" Value="#787878"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border x:Name="itemBorder" Height="20" Width="130" Background="Transparent" Margin="8" CornerRadius="5">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" Value="#DBDBDB" TargetName="itemBorder"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ComboBoxToggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="ClickMode" Value="Press" />
            <Setter Property="Width" Value="30"/>
            <Setter Property="Margin" Value="0 0 2 5"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="MinHeight" Value="20"></Setter>
            <Setter Property="MinWidth" Value="5"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid>
                            <Border   BorderBrush="#787878" Background="White">
                            </Border>
                            <!--倒三角的颜色#0099ff-->
                            <Path Height="5" x:Name="Path1" HorizontalAlignment="Right" 
                                VerticalAlignment="Center" Margin="2,0,10,0" Width="8"
                                Fill="#FFA8AAAC" Stretch="Fill" Stroke="#808080"
                                Data="M0.5,0.5 L9.5,0.5 L5.0625,9.5 L5.0625,9.5 z" >
                            </Path>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="False">
                                <!--移入时按钮颜色 图案颜色 背景颜色 锯齿颜色-->
                                <Setter TargetName="Path1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DefaultComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Foreground" Value="#FFFFFFFF" />
            <Setter Property="BorderBrush" Value="#B8B8B8" />
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="MinWidth" Value="150"/>
            <Setter Property="Height" Value="22"/>
            <Setter Property="IsEditable" Value="False"/>
            <Setter Property="IsTextSearchEnabled" Value="True" />
            <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemStyle}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Border x:Name="border" BorderBrush="Gray" 
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Background="{TemplateBinding Background}"
                                 SnapsToDevicePixels="True" 
                                 CornerRadius="5">
                            <Grid x:Name="mainGrid" Background="Transparent" >
                                <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                                    <Grid MaxHeight="150" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                        <Border x:Name="DropDownBorder"  BorderBrush="#e8e8e8" BorderThickness="1 0 1 1"/>
                                        <ScrollViewer Margin="1"  SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                            <!--StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True-->
                                            <StackPanel IsItemsHost="True"  KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                                <ToggleButton Style="{StaticResource ComboBoxToggleButtonStyle}"  Background="Transparent"  
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  >

                                </ToggleButton>
                                <TextBox  Style="{StaticResource ComboBoxTextBox}" VerticalAlignment="Center"
                                 Text="{Binding Path=SelectedValue, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                         />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                <Setter Property="IsEditable" Value="True"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                <Setter Property="IsEditable" Value="True"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ResourceDictionary.MergedDictionaries>
            <!--<ResourceDictionary Source="pack://application:,,,/Resource/Styles/DefaultStyle.xaml"/>-->
            <ResourceDictionary>
                <converter:ResultConverter x:Key="IconConverter"/>
            </ResourceDictionary>
        </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <Grid MouseLeftButtonDown="Grid_MouseLeftButtonDown" >
        <Grid.RowDefinitions>
            <RowDefinition Height="40*"/>
            <RowDefinition Height="60*"/>
            <RowDefinition Height="200*"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="400*"/>
            <RowDefinition Height="25*"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" MouseLeftButtonDown="Grid_MouseLeftButtonDown">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <Border Margin="20 0 0 0"  HorizontalAlignment="Left">
                <WrapPanel VerticalAlignment="Center">
                    <Label Content="查 询 数 据"  FontSize="18" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" 
                           Width="100" FontWeight="Bold" 
                           Foreground="#555" />
                    <Label Content="{Binding SoftwareVersion}" FontSize="15" VerticalAlignment="Center" Margin="20,0,0,0"/>
                </WrapPanel>

            </Border>
            <StackPanel Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Right" Orientation="Horizontal">
                <Button Content="&#xe721;" Style="{StaticResource ControlButtonStyle}" Background="#11000000" Tag="#333"
           Click="btnMin_Click"  Width="40" Height="40"/>
                <Button Content="&#xe720;" Style="{StaticResource ControlButtonStyle}" Background="#11000000" Tag="#333"
           Click="btnMax_Click" Width="40" Height="40"/>
                <Button Content="&#xe71f;" Width="40" Height="40" Style="{StaticResource ControlButtonStyle}" Background="#FFE63535" Tag="White"
                        Command="{Binding WindowClose}" CommandParameter="{Binding Path=.,RelativeSource={RelativeSource AncestorType=Window}}"/>
            </StackPanel>
        </Grid>
        <Border BorderBrush="#EEE" BorderThickness="0,0,0,1"/>
        <WrapPanel Grid.Row="1" VerticalAlignment="Center">
            <Label Content="开始时间" FontSize="15" Margin="20 0 0 0" Width="auto" HorizontalContentAlignment="Left"/>
            <DatePicker Margin="10 0 0 0" Height="30" FontSize="15"   Text="{Binding TestStartTime, Mode=TwoWay}"/>
            <Label Content="结束时间" FontSize="15" Margin="20 0 0 0" Width="auto" HorizontalContentAlignment="Left"/>
            <DatePicker Margin="10 0 0 0" Height="30" FontSize="15"   Text="{Binding TestEndTime, Mode=TwoWay}"/>
            <Label Content="项目编号" FontSize="15" Margin="20 0 0 0" Width="auto" HorizontalContentAlignment="Left"/>
            <ComboBox Name="CBName" FontSize="15" Margin="10 0 0 0" HorizontalAlignment="Left" 
                      Width="165" Height="30"  
                      IsTextSearchEnabled="False" 
                      Style="{StaticResource DefaultComboBoxStyle}"
                      SelectedValue="{Binding SearchTestText,Mode=TwoWay}" 
                      ItemsSource="{Binding Product_Tests}"  />

            <!--<i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus">
                        <i:InvokeCommandAction Command="{Binding SelectTestCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="LostFocus">
                        <i:InvokeCommandAction Command="{Binding DelectTestCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>-->


            <Label Content="产品编号" FontSize="15" Margin="20 0 0 0" Width="auto" HorizontalContentAlignment="Left"/>
            <TextBox FontSize="15" Margin="10 0 0 0" HorizontalAlignment="Left" Width="165" Height="30" Text="{Binding SearchTestSN}" 
                     InputMethod.IsInputMethodEnabled="False"/>

            <!--<Label Content="样品编号" FontSize="15" Margin="20 0 0 0" Width="auto" HorizontalContentAlignment="Left"/>
            <ComboBox ItemsSource="{Binding Products}" SelectedValue="{Binding Product_SN}" FontSize="15" Margin="10 0 0 0" HorizontalAlignment="Left" 
                      Width="150" Height="30" Style="{StaticResource DefaultComboBoxStyle}"/>-->
            <Button Content="查 询" Width="50" Height="30" BorderThickness="0"  FontSize="15" Margin="20 0 0 0" Command="{Binding SelectTestDataCommand}"/>
            <Button Content="导出数据" Width="100" Height="30" BorderThickness="0"  FontSize="15" Margin="20 0 0 0" Command="{Binding SelectTestDataToSave}" CommandParameter="{Binding ElementName=ItemdataGrid,Path=SelectedIndex}"/>
        </WrapPanel>
        <Grid Grid.Row="2" VerticalAlignment="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1067*"/>
                <!--<ColumnDefinition Width="31*"/>-->
            </Grid.ColumnDefinitions>
            <DataGrid  Name="ItemdataGrid"  ItemsSource="{Binding  TestItemDataTable}"
                       Height="auto"
                       CanUserAddRows="False" 
                       ColumnWidth="*" 
                       IsReadOnly="True" 
                       AutoGenerateColumns="False"
                       ScrollViewer.VerticalScrollBarVisibility="Visible" 
                       Grid.ColumnSpan="2"  
                       SelectedIndex="{Binding ItemIDSelectindex}">
                <DataGrid.Columns>
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.Header>
                            <CheckBox  Content="全选">
                                <!--IsChecked="{Binding DataContext.IsSelectAll,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource AncestorType=Window, AncestorLevel=1 }}">-->
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction  Command="{Binding  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}},Path= DataContext.SelectAllCommand }"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}},Path= DataContext.SelectAllCommand }"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                        </DataGridTemplateColumn.Header>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding IsSelect,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="45"/>
                                <!--Command="{Binding DataContext.AddSelectItemID, RelativeSource={RelativeSource AncestorType=Window}}"   
CommandParameter="{Binding .}">-->
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <!--<DataGridCheckBoxColumn x:Name="check_ItemID" Width="50" Header="选择" >
                        <DataGridCheckBoxColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <CheckBox x:Name="_chkSelected"
                        Height="16"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="{x:Null}"
                        VerticalContentAlignment="Center"
                        HorizontalContentAlignment="Center"
                         Command="{Binding AddSelectItemID,ElementName=DBOWindow}"  
                        IsThreeState="False"
                        IsChecked="{Binding IsCheckboxChecked, Mode=OneWay, FallbackValue=True}"
                        >
                                            </CheckBox>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </DataGridCheckBoxColumn.CellStyle>
                    </DataGridCheckBoxColumn>-->

                    <DataGridTextColumn Width="4*"  Header="样机编号" Binding="{Binding Pro_SN}" IsReadOnly="True"/>
                    <!--<DataGridTextColumn Width="3*" Header="机柜编号" Binding="{Binding CabinetID}" IsReadOnly="True"/>-->
                    <!--<DataGridTextColumn Width="3*" Header="工位" Binding="{Binding StationID}" IsReadOnly="True"/>-->
                    <!--<DataGridTextColumn Width="4*"  Header="循环数" Binding="{Binding Test_CycleNum}" IsReadOnly="True"/>-->
                    <DataGridTextColumn Width="4*"  Header="实际运行时间" Binding="{Binding Test_ActTime}" IsReadOnly="True"/>
                    <DataGridTextColumn Width="4*" Header="起始时间" Binding="{Binding Test_StartTime, StringFormat={}{0:yyyy-MM-dd HH:mm:ss}}" IsReadOnly="True"/>
                    <DataGridTextColumn Width="4*" Header="结束时间" Binding="{Binding Test_EndTime, StringFormat={}{0:yyyy-MM-dd HH:mm:ss}}" IsReadOnly="True"/>
                    <DataGridTextColumn Width="3*" Header="试验结果" Binding="{Binding Result, Converter={StaticResource IconConverter}}" IsReadOnly="True"/>
                    <DataGridTextColumn Width="6*" Header="故障信息" Binding="{Binding ErrorInfo}" IsReadOnly="True"/>
                    <DataGridTextColumn Width="3*" Header="操作人员" Binding="{Binding Operator}" IsReadOnly="True"/>
                </DataGrid.Columns>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding Path=SelectedItemChangedCommand}"
                           CommandParameter="{Binding ElementName=ItemdataGrid,Path=SelectedIndex}"/>
                    </i:EventTrigger>
                    <!--<i:EventTrigger EventName="Checked">
                        <i:InvokeCommandAction Command="{Binding Path=AddSelectItemID}"
        CommandParameter="{Binding ElementName=check_ItemID,Path=IsChecked}"/>
                    </i:EventTrigger>-->
                </i:Interaction.Triggers>

            </DataGrid>

        </Grid>
        <GridSplitter Grid.Row="3"  Height="3" Foreground="Gray" HorizontalAlignment="Stretch" VerticalAlignment="Center" ShowsPreview="True"/>
        <!--<Grid Grid.Row="3">-->
        <DataGrid Grid.Row="4" Name="TestdataGrid" ItemsSource="{Binding  TestDataTable}"  CanUserAddRows="False"  IsReadOnly="True"  FrozenColumnCount="1"
                             ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Visible">

        </DataGrid>
        <!--<Grid Margin="20" Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBlock Text="{Binding }" VerticalAlignment="Top"/>
                <lvc:CartesianChart Grid.Row="1">
                    <lvc:CartesianChart.Series>
                        <lvc:LineSeries Stroke="#FF7261" PointGeometrySize="0" Values="156,600,70,760,320,540,880,340,500">
                            <lvc:LineSeries.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="#FFE3E0" Offset="0"/>
                                    <GradientStop Color="White" Offset="1"/>
                                </LinearGradientBrush>
                            </lvc:LineSeries.Fill>
                        </lvc:LineSeries>
                    </lvc:CartesianChart.Series>
                    <lvc:CartesianChart.AxisX>
                        <lvc:Axis ShowLabels="True" Labels="1:00,2:00,3:00,4:00,5:00,6:00,7:00,8:00,9:00" 
                                          LabelsRotation="0" FontSize="8">
                            <lvc:Axis.Separator>
                                <lvc:Separator Step="1" StrokeThickness="0"/>
                            </lvc:Axis.Separator>
                        </lvc:Axis>
                    </lvc:CartesianChart.AxisX>
                    <lvc:CartesianChart.AxisY>
                        <lvc:Axis MinValue="0" ShowLabels="True" FontSize="8">
                            <lvc:Axis.Separator>
                                <lvc:Separator Step="200"/>
                            </lvc:Axis.Separator>
                        </lvc:Axis>
                    </lvc:CartesianChart.AxisY>
                </lvc:CartesianChart>
            </Grid>-->
        <!--</Grid>-->
        <Grid Grid.Row="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition  Width="2*" />
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <WrapPanel Grid.Column="0">
                <Label Content="当前页行数:" Margin="5 0 0 0"/>
                <Label Content="{Binding TestDataCount}" />
                <Label Content="当前页/总页数:" Margin="5 0 0 0"/>
                <Label Content="{Binding TestDataSelectPage}" Margin="5 0 0 0"/>
                <Label Content="/"/>
                <Label Content="{Binding TestDataALLPage}"/>
                <Button Content="第一页" Margin="5 0 0 0" BorderThickness="0" Background="Transparent" Command="{Binding SelectNextDataCommand}" CommandParameter="第一页"/>
                <Button Content="上一页" Margin="5 0 0 0" BorderThickness="0" Background="Transparent" Command="{Binding SelectNextDataCommand}" CommandParameter="上一页"/>
                <Button Content="下一页" Margin="5 0 0 0" BorderThickness="0" Background="Transparent" Command="{Binding SelectNextDataCommand}" CommandParameter="下一页"/>
                <Button Content="最后一页" Margin="5 0 0 0" BorderThickness="0" Background="Transparent" Command="{Binding SelectNextDataCommand}" CommandParameter="最后一页"/>
            </WrapPanel>
            <ProgressBar Grid.Column="1" Width="300" Height="20" IsIndeterminate="True" Minimum="0"  ToolTip="{Binding ProBarText}" 
       Value="{Binding ProBarValue}" Visibility="{Binding ProBarVisily}" Maximum="{Binding ProBarMaxValue}"/>
            <TextBlock  Grid.Column="2" Text="{Binding ProBarText}" Visibility="{Binding ProBarVisily}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
        </Grid>
    </Grid>
</Window>
