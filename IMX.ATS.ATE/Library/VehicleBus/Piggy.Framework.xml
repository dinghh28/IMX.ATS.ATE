<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Piggy.Framework</name>
    </assembly>
    <members>
        <member name="T:Super.Zoo.Framework.AsyncExtends">
            <summary>
            异步操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke``1(System.Windows.Forms.Control,System.Action{``0},``0)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <param name="arg1">参数 1</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke``2(System.Windows.Forms.Control,System.Action{``0,``1},``0,``1)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke``3(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke``4(System.Windows.Forms.Control,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke``5(System.Windows.Forms.Control,System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.AsyncExtends.Invoke``6(System.Windows.Forms.Control,System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            在控件的线程中执行指定的 Action
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="control">[THIS] 委托执行的控件</param>
            <param name="action">需要执行的 Action</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <returns>操作结果</returns>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="T:Super.Zoo.Framework.Debugger.ConsoleRedirector">
            <summary>
            控制台重定向器
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Debugger.ConsoleRedirector.defaultTextWriter">
            <summary>
            默认的 TextWriter
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Debugger.ConsoleRedirector.traceTextWriter">
            <summary>
            输出到 Trace 的 TextWriter
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Debugger.ConsoleRedirector.debugTextWriter">
            <summary>
            输出到 Debug 的 TextWriter
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.RedirectOutToDefault">
            <summary>
            重定向输出（恢复 <see cref="T:System.Console"/> 重定向到默认配置）
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.RedirectOutToTrace">
            <summary>
            重定向输出（将 <see cref="T:System.Console"/> 重定向到 <see cref="T:System.Diagnostics.Trace"/>）
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.RedirectOutToDebug">
            <summary>
            重定向输出（将 <see cref="T:System.Console"/> 重定向到 <see cref="T:System.Diagnostics.Debug"/>）
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter">
            <summary>
            输出到 Trace 的 TextWriter
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Char[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteAsync(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Char[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLineAsync(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLineAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.TraceTextWriter.WriteLineAsync">
            <inheritdoc/>
        </member>
        <member name="T:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter">
            <summary>
            输出到 Debug 的 TextWriter
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Char[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteAsync(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Char[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLineAsync(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLineAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleRedirector.DebugTextWriter.WriteLineAsync">
            <inheritdoc/>
        </member>
        <member name="T:Super.Zoo.Framework.Debugger.DebugExtends">
            <summary>
            调试操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.DebugExtends.IsAttached(System.Object)">
            <summary>
            判断是否被调试器附加
            </summary>
            <param name="_">[THIS] 任意对象</param>
            <returns>操作结果 @ 附加状态</returns>
        </member>
        <member name="T:Super.Zoo.Framework.Debugger.ConsoleDumper">
            <summary>
            控制台转储器
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.SetForegroundColor``1(``0,System.ConsoleColor)">
            <summary>
            设置控制台前景颜色
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="color">颜色</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.SetBackgroundColor``1(``0,System.ConsoleColor)">
            <summary>
            设置控制台背景颜色
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="color">颜色</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.ResetColor``1(``0)">
            <summary>
            重置控制台颜色
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpData``1(``0)">
            <summary>
            转储数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpData``1(``0,System.String)">
            <summary>
            转储数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.Line``1(``0)">
            <summary>
            转储空白行
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.Line``1(``0,System.String)">
            <summary>
            转储描述行
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.Dump``1(``0)">
            <summary>
            转储数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.Dump``2(``0,System.Func{``0,``1})">
            <summary>
            转储数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.Dump``1(``0,System.String)">
            <summary>
            转储数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.Dump``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            转储数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpPass``1(``0)">
            <summary>
            转储 PASS 数据（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpPass``2(``0,System.Func{``0,``1})">
            <summary>
            转储 PASS 数据（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpPass``1(``0,System.String)">
            <summary>
            转储 PASS 数据（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpPass``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            转储 PASS 数据（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpFail``1(``0)">
            <summary>
            转储 FAIL 数据（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpFail``2(``0,System.Func{``0,``1})">
            <summary>
            转储 FAIL 数据（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpFail``1(``0,System.String)">
            <summary>
            转储 FAIL 数据（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpFail``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            转储 FAIL 数据（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpDebug``1(``0)">
            <summary>
            转储 DEBUG 数据（字体: 灰色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpDebug``2(``0,System.Func{``0,``1})">
            <summary>
            转储 DEBUG 数据（字体: 灰色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpDebug``1(``0,System.String)">
            <summary>
            转储 DEBUG 数据（字体: 灰色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpDebug``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            转储 DEBUG 数据（字体: 灰色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpWarn``1(``0)">
            <summary>
            转储 WARN 数据（字体: 黄色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpWarn``2(``0,System.Func{``0,``1})">
            <summary>
            转储 WARN 数据（字体: 黄色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpWarn``1(``0,System.String)">
            <summary>
            转储 WARN 数据（字体: 黄色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpWarn``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            转储 WARN 数据（字体: 黄色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpError``1(``0)">
            <summary>
            转储 ERROR 数据（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpError``2(``0,System.Func{``0,``1})">
            <summary>
            转储 ERROR 数据（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpError``1(``0,System.String)">
            <summary>
            转储 ERROR 数据（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpError``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            转储 ERROR 数据（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 数据</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed(Super.Zoo.Framework.OperateResult)">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed(Super.Zoo.Framework.OperateResult,System.String)">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed``1(Super.Zoo.Framework.OperateResult{``0},System.String)">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0},System.String)">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfSucceed``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1},System.String)">
            <summary>
            转储 SUCCEED 操作结果（字体: 绿色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed(Super.Zoo.Framework.OperateResult)">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed(Super.Zoo.Framework.OperateResult,System.String)">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed``1(Super.Zoo.Framework.OperateResult{``0},System.String)">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0},System.String)">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfFailed``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1},System.String)">
            <summary>
            转储 FAILED 操作结果（字体: 红色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted(Super.Zoo.Framework.OperateResult)">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted(Super.Zoo.Framework.OperateResult,System.String)">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted``1(Super.Zoo.Framework.OperateResult{``0},System.String)">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0},System.String)">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpIfExcepted``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1},System.String)">
            <summary>
            转储 EXCEPTED 操作结果（背景: 深红色, 字体: 白色）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult(Super.Zoo.Framework.OperateResult)">
            <summary>
            转储操作结果
            </summary>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``1(Super.Zoo.Framework.OperateResult,System.String)">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``2(Super.Zoo.Framework.OperateResult{``0},System.String)">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``1(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,``0},System.String)">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Debugger.ConsoleDumper.DumpResult``2(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},``1},System.String)">
            <summary>
            转储操作结果
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TObject">处理后数据类型</typeparam>
            <param name="data">[THIS] 操作结果</param>
            <param name="function">数据处理</param>
            <param name="description">描述信息</param>
            <returns>数据</returns>
        </member>
        <member name="T:Super.Zoo.Framework.ControlExtends">
            <summary>
            控件操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ControlExtends.SetMoveable(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            设置在目标控件单击鼠标左键并移动时，目标控件所在窗体跟随移动功能。
            </summary>
            <param name="control">[THIS] 目标控件</param>
            <param name="setAllChildren">设置所有包含控件</param>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ControlExtends.SetMoveable(System.Windows.Forms.Control,System.Func{System.Windows.Forms.Control,System.Boolean})">
            <summary>
            设置在目标控件（以及子控件）单击鼠标左键并移动时，目标控件所在窗体跟随移动功能。
            </summary>
            <param name="control">[THIS] 目标控件</param>
            <param name="predicate">筛选条件</param>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ControlExtends.UnsetMoveable(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            取消在目标控件单击鼠标左键并移动时，目标控件所在窗体跟随移动功能。
            </summary>
            <param name="control">[THIS] 目标控件</param>
            <param name="unsetAllChildren">取消所有包含控件</param>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ControlExtends.UnsetMoveable(System.Windows.Forms.Control,System.Func{System.Windows.Forms.Control,System.Boolean})">
            <summary>
            取消在目标控件（以及子控件）单击鼠标左键并移动时，目标控件所在窗体跟随移动功能。
            </summary>
            <param name="control">[THIS] 目标控件</param>
            <param name="predicate">筛选条件</param>
            <remarks>
            <c>[WinForm Only]</c>
            </remarks>
        </member>
        <member name="F:Super.Zoo.Framework.ControlExtends.locations">
            <summary>
            鼠标单击位置
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ControlExtends.Control_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            记录鼠标单击位置
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ControlExtends.Control_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            窗体移动
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.MoveableExtenderProvider">
            <summary>
            移动状态扩展组件
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.MoveableExtenderProvider.GetIsMoveable(System.Windows.Forms.Control)">
            <summary>
            设置移动状态
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.MoveableExtenderProvider.SetIsMoveable(System.Windows.Forms.Control,Super.Zoo.Framework.MoveableExtenderProvider.Moveable)">
            <summary>
            设置移动状态
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.MoveableExtenderProvider.CanExtend(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Super.Zoo.Framework.MoveableExtenderProvider.Moveable">
            <summary>
            可移动状态
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.MoveableExtenderProvider.Moveable.NotSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.MoveableExtenderProvider.Moveable.Enable">
            <summary>
            启用
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.MoveableExtenderProvider.Moveable.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.IdentifiedDisposableObject">
            <summary>
            带标识可释放对象
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.IdentifiedDisposableObject.Identify">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.IdentifiedDisposableObject.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.IdentifiedDisposableLoggerObject">
            <summary>
            带标识可释放日志记录对象
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.Logger">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.OutterLogger">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.LastError">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.#ctor(Super.Zoo.Framework.Logger.ILogger)">
            <summary>
            构造函数
            </summary>
            <param name="logger">日志记录接口</param>
        </member>
        <member name="M:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.SetError(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.IdentifiedDisposableLoggerObject.InternalDispose">
            <inheritdoc/>
        </member>
        <member name="T:Super.Zoo.Framework.DisposableObject">
            <summary>
            可释放对象
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.DisposableObject.Disposed">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.DisposableObject.#ctor">
            <summary>
            无参析构函数
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.DisposableObject.Finalize">
            <summary>
            析构方法
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.DisposableObject.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.DisposableObject.InternalDispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.IDisposableObject">
            <summary>
            可释放对象接口，继承以下 1 个常用接口
            <list type="bullet">
                <item>
                    <term>析构接口</term>
                    <description><see cref="T:System.IDisposable"/></description>
                </item>
            </list>
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.IDisposableObject.Disposed">
            <summary>
            析构状态
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.IIdentifiedDisposableObject">
            <summary>
            带标识可释放对象接口，继承以下 2 个常用接口
            <list type="bullet">
                <item>
                    <term>标识接口</term>
                    <description><see cref="T:Super.Zoo.Framework.IIdentify"/></description>
                </item>
                <item>
                    <term>析构接口</term>
                    <description><see cref="T:System.IDisposable"/></description>
                </item>
            </list>
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.ManagerObject`1">
            <summary>
            管理器抽象对象
            </summary>
            <typeparam name="TInterface">对象接口类型</typeparam>
        </member>
        <member name="F:Super.Zoo.Framework.ManagerObject`1.objectCollection">
            <summary>
            对象集合
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ManagerObject`1.Count">
            <summary>
            存储对象数量
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ManagerObject`1.IsEmpty">
            <summary>
            存储对象是否为空
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ManagerObject`1.Keys">
            <summary>
            存储对象 ID 列表
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ManagerObject`1.Values">
            <summary>
            存储对象列表
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.SetObject``1(System.String)">
            <summary>
            设置对象（增加或更新）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.SetObject``1(System.String,``0)">
            <summary>
            设置对象（增加或更新）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="tObject">对象</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.SetObject``1(System.String,System.Action{``0})">
            <summary>
            设置对象（增加或更新）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="initializer">对象初始化器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.SetObject``1(System.String,System.Action{System.String,``0})">
            <summary>
            设置对象（增加或更新）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="initializer">对象初始化器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.SetObject``1(System.String,System.Func{``0})">
            <summary>
            设置对象（增加或更新）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="generator">对象生成器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.SetObject``1(System.String,System.Func{System.String,``0})">
            <summary>
            设置对象（增加或更新）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="generator">对象生成器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.GetObject``1(System.String)">
            <summary>
            获取对象（增加或获取）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.GetObject``1(System.String,``0)">
            <summary>
            获取对象（增加或获取）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="tObject">对象</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.GetObject``1(System.String,System.Action{``0})">
            <summary>
            获取对象（增加或获取）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="initializer">对象初始化器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.GetObject``1(System.String,System.Action{System.String,``0})">
            <summary>
            获取对象（增加或获取）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="initializer">对象初始化器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.GetObject``1(System.String,System.Func{``0})">
            <summary>
            获取对象（增加或获取）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="generator">对象生成器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.GetObject``1(System.String,System.Func{System.String,``0})">
            <summary>
            获取对象（增加或获取）
            </summary>
            <typeparam name="T">对象接口类型</typeparam>
            <param name="id">对象 ID</param>
            <param name="generator">对象生成器</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ManagerObject`1.RemoveObject(System.String,System.Boolean)">
            <summary>
            删除对象
            </summary>
            <param name="id">对象 ID</param>
            <param name="dispose">是否析构对象（若对象继承 <see cref="T:System.IDisposable"/> 接口，则会调用 <see cref="M:System.IDisposable.Dispose"/> 方法）</param>
            <returns>删除结果</returns>
        </member>
        <member name="T:Super.Zoo.Framework.SingletonObject`1">
            <summary>
            单例泛型抽象对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:Super.Zoo.Framework.SingletonObject`1.lazyObject">
            <summary>
            默认延迟创建对象
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.SingletonObject`1.lazyObjectCollection">
            <summary>
            延迟创建对象集合
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.SingletonObject`1.Default">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.SingletonObject`1.GetInstance(System.String)">
            <summary>
            获取实例
            </summary>
            <param name="name">实例名称</param>
            <returns>实例</returns>
        </member>
        <member name="T:Super.Zoo.Framework.IIdentifiedDisposableLoggerObject">
            <summary>
            带标识可释放日志记录对象接口，继承以下 3 个常用接口
            <list type="bullet">
                <item>
                    <term>标识接口</term>
                    <description><see cref="T:Super.Zoo.Framework.IIdentify"/></description>
                </item>
                <item>
                    <term>日志记录接口</term>
                    <description><see cref="T:Super.Zoo.Framework.Logger.ILogRecord"/></description>
                </item>
                <item>
                    <term>析构接口</term>
                    <description><see cref="T:System.IDisposable"/></description>
                </item>
            </list>
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.BitOperationExtends">
            <summary>
            位运算扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Not(System.Byte)">
            <summary>
            非
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.And(System.Byte,System.Byte)">
            <summary>
            与
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Byte"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Byte"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Nand(System.Byte,System.Byte)">
            <summary>
            与非
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Byte"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Byte"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Or(System.Byte,System.Byte)">
            <summary>
            或
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Byte"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Byte"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Nor(System.Byte,System.Byte)">
            <summary>
            或非
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Byte"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Byte"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Xor(System.Byte,System.Byte)">
            <summary>
            异或
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Byte"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Byte"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Xnor(System.Byte,System.Byte)">
            <summary>
            异或非
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Byte"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Byte"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Lsh(System.Byte,System.Int32)">
            <summary>
            左移
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="number">位数（小于 <see langword="0"/> 时转换为 <see cref="M:Super.Zoo.Framework.BitOperationExtends.Rsh(System.Byte,System.Int32)"/>）</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Rsh(System.Byte,System.Int32)">
            <summary>
            右移
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="number">位数（小于 <see langword="0"/> 时转换为 <see cref="M:Super.Zoo.Framework.BitOperationExtends.Lsh(System.Byte,System.Int32)"/>）</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.SetBit(System.Byte,System.Int32)">
            <summary>
            设置 bit 位
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="index">第几位（范围: 0 ~ 7 | -1 ~ -8，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see href="value"/> 原始值）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClearBit(System.Byte,System.Int32)">
            <summary>
            清除 bit 位
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="index">第几位（范围: 0 ~ 7 | -1 ~ -8，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see href="value"/> 原始值）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.GetBit(System.Byte,System.Int32)">
            <summary>
            获取 bit 位
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="index">第几位（范围: 0 ~ 7 | -1 ~ -8，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="false"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.Byte,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 7 | -1 ~ -8，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.Int16,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int16"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 15 | -1 ~ -16，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.UInt16,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt16"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 15 | -1 ~ -16，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.Int32,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.UInt32,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt32"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.Int64,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int64"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 63 | -1 ~ -64，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsByte(System.UInt64,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Byte"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt64"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 63 | -1 ~ -64，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Not(System.Int32)">
            <summary>
            非
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.And(System.Int32,System.Int32)">
            <summary>
            与
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Int32"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Int32"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Nand(System.Int32,System.Int32)">
            <summary>
            与非
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Int32"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Int32"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Or(System.Int32,System.Int32)">
            <summary>
            或
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Int32"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Int32"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Nor(System.Int32,System.Int32)">
            <summary>
            或非
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Int32"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Int32"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Xor(System.Int32,System.Int32)">
            <summary>
            异或
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Int32"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Int32"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Xnor(System.Int32,System.Int32)">
            <summary>
            异或非
            </summary>
            <param name="value1">[THIS] <see cref="T:System.Int32"/> 类型数值1</param>
            <param name="value2"><see cref="T:System.Int32"/> 类型数值2</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Lsh(System.Int32,System.Int32)">
            <summary>
            左移
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="number">位数（小于 <see langword="0"/> 时转换为 <see cref="M:Super.Zoo.Framework.BitOperationExtends.Rsh(System.Int32,System.Int32)"/>）</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.Rsh(System.Int32,System.Int32)">
            <summary>
            右移
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="number">位数（小于 <see langword="0"/> 时转换为 <see cref="M:Super.Zoo.Framework.BitOperationExtends.Lsh(System.Int32,System.Int32)"/>）</param>
            <returns>计算值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.SetBit(System.Int32,System.Int32)">
            <summary>
            设置 bit 位
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="index">第几位（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see href="value"/> 原始值）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClearBit(System.Int32,System.Int32)">
            <summary>
            清除 bit 位
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="index">第几位（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see href="value"/> 原始值）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.GetBit(System.Int32,System.Int32)">
            <summary>
            获取 bit 位
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="index">第几位（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="false"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.Byte,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 7 | -1 ~ -8，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.Int16,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int16"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 15 | -1 ~ -16，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.UInt16,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt16"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 15 | -1 ~ -16，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.Int32,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.UInt32,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt32"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 31 | -1 ~ -32，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.Int64,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int64"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 63 | -1 ~ -64，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.BitOperationExtends.ClipAsInt(System.UInt64,System.Int32)">
            <summary>
            截取为 <see cref="T:System.Int32"/> 类型数据
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt64"/> 类型数值</param>
            <param name="index">第几位开始截取（范围: 0 ~ 63 | -1 ~ -64，小于 <see langword="0"/> 时从末尾开始计数）</param>
            <returns>计算值（超出取值范围返回 <see langword="0"/>）</returns>
        </member>
        <member name="T:Super.Zoo.Framework.DeepCloneExtends">
            <summary>
            深拷贝操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.DeepCloneExtends.CloneObject``1(``0)">
            <summary>
            深拷贝对象
            </summary>
            <typeparam name="TObject">深拷贝对象类型</typeparam>
            <param name="obj">[THIS] 待拷贝对象</param>
            <returns>拷贝对象</returns>
            <remarks>
            调用了 `Force.DeepCloner` 项目的 `DeepClone` 方法
            </remarks>
        </member>
        <member name="T:Super.Zoo.Framework.EnumerableExtends">
            <summary>
            枚举对象操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.EnumerableExtends.ToHexString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            转换为 16进制 字符串
            </summary>
            <param name="array">[THIS] 数据</param>
            <returns>16进制 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumerableExtends.ToHexString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            转换为 16进制 字符串
            </summary>
            <param name="array">[THIS] 数据</param>
            <param name="separator">分隔符</param>
            <returns>16进制 字符串</returns>
        </member>
        <member name="T:Super.Zoo.Framework.EnumExtends">
            <summary>
            枚举操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.ToEnum``1(System.String)">
            <summary>
            根据枚举名获取枚举对象
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="name">枚举名</param>
            <returns>枚举对象（获取失败返回 (T)<see langword="0"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.ToEnum``1(System.Int32)">
            <summary>
            根据枚举值获取枚举对象
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="value">枚举值</param>
            <returns>枚举对象（获取失败返回 (T)<see langword="value"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetName``1(``0)">
            <summary>
            获取枚举名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="item">[THIS] 枚举对象</param>
            <returns>枚举名（获取失败返回 <see cref="F:System.String.Empty"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetName``1(System.Int32)">
            <summary>
            获取枚举名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="value">枚举值</param>
            <returns>枚举名（获取失败返回 <see cref="F:System.String.Empty"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetName(System.Type,System.Int32)">
            <summary>
            获取枚举名
            </summary>
            <param name="type">枚举类型</param>
            <param name="value">枚举值</param>
            <returns>枚举名（获取失败返回 <see cref="F:System.String.Empty"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetValue``1(``0)">
            <summary>
            获取枚举值（<see cref="M:System.Enum.GetHashCode"/>）
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="item">[THIS] 枚举对象</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetValue``1(System.String)">
            <summary>
            获取枚举值（<see cref="M:System.Enum.GetHashCode"/>）
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="name">枚举名</param>
            <returns>枚举值（未定义返回 <see langword="default"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetValue(System.Type,System.String)">
            <summary>
            获取枚举值（<see cref="M:System.Enum.GetHashCode"/>）
            </summary>
            <param name="type">枚举类型</param>
            <param name="name">枚举名</param>
            <returns>枚举值（未定义返回 <see langword="default"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetAttribute``2(``0)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <typeparam name="TAttribute">自定义属性类型</typeparam>
            <param name="item">[THIS] 枚举对象</param>
            <returns>自定义属性（获取失败返回 <see langword="null"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetAttribute``2(System.String)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <typeparam name="TAttribute">自定义属性类型</typeparam>
            <param name="name">枚举名</param>
            <returns>自定义属性（获取失败返回 <see langword="null"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetAttribute``1(System.Type,System.String)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="TAttribute">自定义属性类型</typeparam>
            <param name="type">枚举类型</param>
            <param name="name">枚举名</param>
            <returns>自定义属性（获取失败返回 <see langword="null"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetDescription``1(``0)">
            <summary>
            获取描述信息（<see cref="P:System.ComponentModel.DescriptionAttribute.Description"/>）
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="item">[THIS] 枚举对象</param>
            <returns>描述信息（获取失败返回 <see cref="F:System.String.Empty"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetDescription``1(System.String)">
            <summary>
            获取描述信息（<see cref="P:System.ComponentModel.DescriptionAttribute.Description"/>）
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="name">枚举名</param>
            <returns>描述信息（获取失败返回 <see cref="F:System.String.Empty"/>）</returns>
        </member>
        <member name="M:Super.Zoo.Framework.EnumExtends.GetDescription(System.Type,System.String)">
            <summary>
            获取描述信息（<see cref="P:System.ComponentModel.DescriptionAttribute.Description"/>）
            </summary>
            <param name="type">枚举类型</param>
            <param name="name">枚举名</param>
            <returns>描述信息（获取失败返回 <see cref="F:System.String.Empty"/>）</returns>
        </member>
        <member name="T:Super.Zoo.Framework.ExceptionExtends">
            <summary>
            异常操作扩展
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.ExceptionExtends.defaultGetMessageEvent">
            <summary>
            获取异常消息默认事件
            </summary>
        </member>
        <member name="E:Super.Zoo.Framework.ExceptionExtends.GetMessageEvent">
            <summary>
            获取异常消息事件
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ExceptionExtends.ResigerGetMessageEvent(System.Func{System.Exception,System.String})">
            <summary>
            注册获取异常消息事件
            </summary>
            <param name="delegate">获取异常消息委托</param>
        </member>
        <member name="M:Super.Zoo.Framework.ExceptionExtends.ResetGetMessageEvent">
            <summary>
            重置获取异常消息事件
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ExceptionExtends.GetMessage(System.Exception)">
            <summary>
            获取异常消息
            </summary>
            <param name="exception">[THIS] 异常对象</param>
            <returns>异常消息</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ExceptionExtends.GetHResult(System.Exception)">
            <summary>
            获取异常代码
            </summary>
            <param name="exception">[THIS] 异常对象</param>
            <returns>异常代码</returns>
        </member>
        <member name="T:Super.Zoo.Framework.ObjectExtends">
            <summary>
            对象操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``1(``0,System.Func{``0,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``2(``0,``1,System.Func{``0,``1,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``3(``0,``1,``2,System.Func{``0,``1,``2,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``4(``0,``1,``2,``3,System.Func{``0,``1,``2,``3,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``5(``0,``1,``2,``3,``4,System.Func{``0,``1,``2,``3,``4,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``6(``0,``1,``2,``3,``4,``5,System.Func{``0,``1,``2,``3,``4,``5,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``7(``0,``1,``2,``3,``4,``5,``6,System.Func{``0,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``1(``0,System.Action{``0})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``2(``0,``1,System.Action{``0,``1})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``5(``0,``1,``2,``3,``4,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``6(``0,``1,``2,``3,``4,``5,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Attach``7(``0,``1,``2,``3,``4,``5,``6,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            附加操作
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <param name="result">[THIS] 操作结果</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``1(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``1(Super.Zoo.Framework.OperateResult,``0,System.Func{Super.Zoo.Framework.OperateResult,``0,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``2(Super.Zoo.Framework.OperateResult{``0},``1,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``2(Super.Zoo.Framework.OperateResult,``0,``1,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``3(Super.Zoo.Framework.OperateResult{``0},``1,``2,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``3(Super.Zoo.Framework.OperateResult,``0,``1,``2,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``4(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``4(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``5(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``5(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``6(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``6(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``7(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed(Super.Zoo.Framework.OperateResult,System.Action{Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <param name="result">[THIS] 操作结果</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``1(Super.Zoo.Framework.OperateResult{``0},System.Action{Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``1(Super.Zoo.Framework.OperateResult,``0,System.Action{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``2(Super.Zoo.Framework.OperateResult{``0},``1,System.Action{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``2(Super.Zoo.Framework.OperateResult,``0,``1,System.Action{Super.Zoo.Framework.OperateResult,``0,``1})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``3(Super.Zoo.Framework.OperateResult{``0},``1,``2,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``3(Super.Zoo.Framework.OperateResult,``0,``1,``2,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``4(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``4(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``5(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``5(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``6(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``6(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfSucceed``7(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6})">
            <summary>
            操作结果 SUCCEED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <param name="result">[THIS] 操作结果</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``1(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``1(Super.Zoo.Framework.OperateResult,``0,System.Func{Super.Zoo.Framework.OperateResult,``0,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``2(Super.Zoo.Framework.OperateResult{``0},``1,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``2(Super.Zoo.Framework.OperateResult,``0,``1,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``3(Super.Zoo.Framework.OperateResult{``0},``1,``2,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``3(Super.Zoo.Framework.OperateResult,``0,``1,``2,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``4(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``4(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``5(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``5(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``6(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``6(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``7(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed(Super.Zoo.Framework.OperateResult,System.Action{Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <param name="result">[THIS] 操作结果</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``1(Super.Zoo.Framework.OperateResult{``0},System.Action{Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``1(Super.Zoo.Framework.OperateResult,``0,System.Action{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``2(Super.Zoo.Framework.OperateResult{``0},``1,System.Action{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``2(Super.Zoo.Framework.OperateResult,``0,``1,System.Action{Super.Zoo.Framework.OperateResult,``0,``1})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``3(Super.Zoo.Framework.OperateResult{``0},``1,``2,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``3(Super.Zoo.Framework.OperateResult,``0,``1,``2,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``4(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``4(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``5(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``5(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``6(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``6(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfFailed``7(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6})">
            <summary>
            操作结果 FAILED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted(Super.Zoo.Framework.OperateResult,System.Func{Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <param name="result">[THIS] 操作结果</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``1(Super.Zoo.Framework.OperateResult{``0},System.Func{Super.Zoo.Framework.OperateResult{``0},Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``1(Super.Zoo.Framework.OperateResult,``0,System.Func{Super.Zoo.Framework.OperateResult,``0,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``2(Super.Zoo.Framework.OperateResult{``0},``1,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``2(Super.Zoo.Framework.OperateResult,``0,``1,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``3(Super.Zoo.Framework.OperateResult{``0},``1,``2,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``3(Super.Zoo.Framework.OperateResult,``0,``1,``2,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``4(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``4(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``5(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``5(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``6(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``6(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,System.Func{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``7(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,System.Func{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="function">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted(Super.Zoo.Framework.OperateResult,System.Action{Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <param name="result">[THIS] 操作结果</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``1(Super.Zoo.Framework.OperateResult{``0},System.Action{Super.Zoo.Framework.OperateResult{``0}})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``1(Super.Zoo.Framework.OperateResult,``0,System.Action{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``2(Super.Zoo.Framework.OperateResult{``0},``1,System.Action{Super.Zoo.Framework.OperateResult{``0},``1})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``2(Super.Zoo.Framework.OperateResult,``0,``1,System.Action{Super.Zoo.Framework.OperateResult,``0,``1})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``3(Super.Zoo.Framework.OperateResult{``0},``1,``2,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``3(Super.Zoo.Framework.OperateResult,``0,``1,``2,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``4(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``4(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``5(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``5(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``6(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``6(Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5,System.Action{Super.Zoo.Framework.OperateResult,``0,``1,``2,``3,``4,``5})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.AttachIfExcepted``7(Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6,System.Action{Super.Zoo.Framework.OperateResult{``0},``1,``2,``3,``4,``5,``6})">
            <summary>
            操作结果 EXCEPTED 时附加操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <typeparam name="TArg1">参数 1 类型</typeparam>
            <typeparam name="TArg2">参数 2 类型</typeparam>
            <typeparam name="TArg3">参数 3 类型</typeparam>
            <typeparam name="TArg4">参数 4 类型</typeparam>
            <typeparam name="TArg5">参数 5 类型</typeparam>
            <typeparam name="TArg6">参数 6 类型</typeparam>
            <param name="result">[THIS] 操作结果</param>
            <param name="arg1">参数 1</param>
            <param name="arg2">参数 2</param>
            <param name="arg3">参数 3</param>
            <param name="arg4">参数 4</param>
            <param name="arg5">参数 5</param>
            <param name="arg6">参数 6</param>
            <param name="action">执行方法</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectExtends.Out``1(``0,``0@)">
            <summary>
            输出对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">[THIS] 对象</param>
            <param name="value">对象</param>
            <returns>对象</returns>
        </member>
        <member name="T:Super.Zoo.Framework.ResourceExtends">
            <summary>
            资源操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.ExistResource(System.Reflection.Assembly,System.String)">
            <summary>
            资源是否存在
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <returns>资源存在状态</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.GetResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            获取资源流
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <returns>资源流</returns>
            <exception cref="T:System.IO.FileNotFoundException">未找到资源异常</exception>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.GetResourceData(System.Reflection.Assembly,System.String)">
            <summary>
            获取资源数据
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <returns>资源数据</returns>
            <exception cref="T:System.IO.FileNotFoundException">未找到资源异常</exception>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.GetResourceString(System.Reflection.Assembly,System.String)">
            <summary>
            获取资源文本（UTF-8）
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <returns>资源文本</returns>
            <exception cref="T:System.IO.FileNotFoundException">未找到资源异常</exception>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.GetResourceString(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            获取资源文本
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <param name="encoding">编码格式</param>
            <returns>资源文本</returns>
            <exception cref="T:System.IO.FileNotFoundException">未找到资源异常</exception>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.GetResourceStringLines(System.Reflection.Assembly,System.String)">
            <summary>
            获取资源文本（UTF-8）
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <returns>资源文本</returns>
            <exception cref="T:System.IO.FileNotFoundException">未找到资源异常</exception>
        </member>
        <member name="M:Super.Zoo.Framework.ResourceExtends.GetResourceStringLines(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            获取资源文本
            </summary>
            <param name="assembly">[THIS] 程序集</param>
            <param name="resource">资源路径</param>
            <param name="encoding">编码格式</param>
            <returns>资源文本</returns>
            <exception cref="T:System.IO.FileNotFoundException">未找到资源异常</exception>
        </member>
        <member name="T:Super.Zoo.Framework.ValueConvertExtends">
            <summary>
            数值转换操作扩展
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToBitString(System.Byte)">
            <summary>
            <see cref="T:System.Byte"/> 转 <see langword="bit"/> 字符串
            </summary>
            <param name="value">[THIS] <see cref="T:System.Byte"/> 类型数值</param>
            <returns>长度为 8 的 <see langword="bit"/> 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToBitString(System.Int16)">
            <summary>
            <see cref="T:System.Int16"/> 转 <see langword="bit"/> 字符串
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int16"/> 类型数值</param>
            <returns>长度为 16 的 <see langword="bit"/> 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToBitString(System.Int32)">
            <summary>
            <see cref="T:System.Int32"/> 转 <see langword="bit"/> 字符串
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <returns>长度为 32 的 <see langword="bit"/> 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToBitString(System.Int64)">
            <summary>
            <see cref="T:System.Int64"/> 转 <see langword="bit"/> 字符串
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int64"/> 类型数值</param>
            <returns>长度为 64 的 <see langword="bit"/> 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToBitString(System.Single)">
            <summary>
            <see cref="T:System.Single"/> 转 <see langword="bit"/> 字符串
            </summary>
            <param name="value">[THIS] <see cref="T:System.Single"/> 类型数值</param>
            <returns>长度为 32 的 <see langword="bit"/> 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToBitString(System.Double)">
            <summary>
            <see cref="T:System.Double"/> 转 <see langword="bit"/> 字符串
            </summary>
            <param name="value">[THIS] <see cref="T:System.Double"/> 类型数值</param>
            <returns>长度为 64 的 <see langword="bit"/> 字符串</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByte(System.String)">
            <summary>
            <see langword="bit"/> 字符串 转 <see cref="T:System.Byte"/>
            </summary>
            <param name="value">[THIS] 长度为 8 的 <see langword="bit"/> 字符串</param>
            <returns><see cref="T:System.Byte"/> 类型数值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt16(System.String)">
            <summary>
            <see langword="bit"/> 字符串 转 <see cref="T:System.Int16"/>
            </summary>
            <param name="value">[THIS] 长度为 16 的 <see langword="bit"/> 字符串</param>
            <returns><see cref="T:System.Int16"/> 类型数值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt32(System.String)">
            <summary>
            <see langword="bit"/> 字符串 转 <see cref="T:System.Int32"/>
            </summary>
            <param name="value">[THIS] 长度为 32 的 <see langword="bit"/> 字符串</param>
            <returns><see cref="T:System.Int32"/> 类型数值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt64(System.String)">
            <summary>
            <see langword="bit"/> 字符串 转 <see cref="T:System.Int64"/>
            </summary>
            <param name="value">[THIS] 长度为 64 的 <see langword="bit"/> 字符串</param>
            <returns><see cref="T:System.Int64"/> 类型数值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToFloat(System.String)">
            <summary>
            <see langword="bit"/> 字符串 转 <see cref="T:System.Single"/>
            </summary>
            <param name="value">[THIS] 长度为 32 的 <see langword="bit"/> 字符串</param>
            <returns><see cref="T:System.Single"/> 类型数值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToDouble(System.String)">
            <summary>
            <see langword="bit"/> 字符串 转 <see cref="T:System.Double"/>
            </summary>
            <param name="value">[THIS] 长度为 64 的 <see langword="bit"/> 字符串</param>
            <returns><see cref="T:System.Double"/> 类型数值</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.Int16)">
            <summary>
            <see cref="T:System.Int16"/> 转 2 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int16"/> 类型数值</param>
            <returns>2 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.UInt16)">
            <summary>
            <see cref="T:System.UInt16"/> 转 2 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt16"/> 类型数值</param>
            <returns>2 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.Int32)">
            <summary>
            <see cref="T:System.Int32"/> 转 4 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <returns>4 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.UInt32)">
            <summary>
            <see cref="T:System.UInt32"/> 转 4 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt32"/> 类型数值</param>
            <returns>4 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.Int64)">
            <summary>
            <see cref="T:System.Int64"/> 转 8 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int64"/> 类型数值</param>
            <returns>8 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.UInt64)">
            <summary>
            <see cref="T:System.UInt64"/> 转 8 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt64"/> 类型数值</param>
            <returns>8 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.Single)">
            <summary>
            <see cref="T:System.Single"/> 转 4 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Single"/> 类型数值</param>
            <returns>4 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArray(System.Double)">
            <summary>
            <see cref="T:System.Double"/> 转 8 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Double"/> 类型数值</param>
            <returns>8 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.Int16)">
            <summary>
            <see cref="T:System.Int16"/> 转 2 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int16"/> 类型数值</param>
            <returns>2 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.UInt16)">
            <summary>
            <see cref="T:System.UInt16"/> 转 2 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt16"/> 类型数值</param>
            <returns>2 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.Int32)">
            <summary>
            <see cref="T:System.Int32"/> 转 4 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int32"/> 类型数值</param>
            <returns>4 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.UInt32)">
            <summary>
            <see cref="T:System.UInt32"/> 转 4 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt32"/> 类型数值</param>
            <returns>4 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.Int64)">
            <summary>
            <see cref="T:System.Int64"/> 转 28 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Int64"/> 类型数值</param>
            <returns>8 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.UInt64)">
            <summary>
            <see cref="T:System.UInt64"/> 转 8 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.UInt64"/> 类型数值</param>
            <returns>8 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.Single)">
            <summary>
            <see cref="T:System.Single"/> 转 4 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Single"/> 类型数值</param>
            <returns>4 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToByteArrayReverse(System.Double)">
            <summary>
            <see cref="T:System.Double"/> 转 8 个字节的 <see cref="T:System.Byte"/> 数组
            </summary>
            <param name="value">[THIS] <see cref="T:System.Double"/> 类型数值</param>
            <returns>8 个字节的 <see cref="T:System.Byte"/> 数组</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt16(System.Byte[])">
            <summary>
            2 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Int16"/>
            </summary>
            <param name="value">[THIS] 2 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Int16"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToUInt16(System.Byte[])">
            <summary>
            2 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">[THIS] 2 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.UInt16"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt32(System.Byte[])">
            <summary>
            4 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Int32"/>
            </summary>
            <param name="value">[THIS] 4 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Int32"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToUInt32(System.Byte[])">
            <summary>
            4 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">[THIS] 4 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.UInt32"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt64(System.Byte[])">
            <summary>
            8 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Int64"/>
            </summary>
            <param name="value">[THIS] 8 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Int64"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToUInt64(System.Byte[])">
            <summary>
            8 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">[THIS] 8 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.UInt64"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToSingle(System.Byte[])">
            <summary>
            4 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Single"/>
            </summary>
            <param name="value">[THIS] 4 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Single"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToDouble(System.Byte[])">
            <summary>
            8 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Double"/>
            </summary>
            <param name="value">[THIS] 8 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Double"/> 类型数值</returns>
            <remarks>[低位 , ... , 高位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt16Reverse(System.Byte[])">
            <summary>
            2 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Int16"/>
            </summary>
            <param name="value">[THIS] 2 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Int16"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToUInt16Reverse(System.Byte[])">
            <summary>
            2 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.UInt16"/>
            </summary>
            <param name="value">[THIS] 2 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.UInt16"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt32Reverse(System.Byte[])">
            <summary>
            4 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Int32"/>
            </summary>
            <param name="value">[THIS] 4 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Int32"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToUInt32Reverse(System.Byte[])">
            <summary>
            4 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.UInt32"/>
            </summary>
            <param name="value">[THIS] 4 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.UInt32"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToInt64Reverse(System.Byte[])">
            <summary>
            8 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Int64"/>
            </summary>
            <param name="value">[THIS] 8 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Int64"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToUInt64Reverse(System.Byte[])">
            <summary>
            8 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.UInt64"/>
            </summary>
            <param name="value">[THIS] 8 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.UInt64"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToSingleReverse(System.Byte[])">
            <summary>
            4 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Single"/>
            </summary>
            <param name="value">[THIS] 4 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Single"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="M:Super.Zoo.Framework.ValueConvertExtends.ToDoubleReverse(System.Byte[])">
            <summary>
            8 个字节的 <see cref="T:System.Byte"/> 数组 转 <see cref="T:System.Double"/>
            </summary>
            <param name="value">[THIS] 8 个字节的 <see cref="T:System.Byte"/> 数组</param>
            <returns><see cref="T:System.Double"/> 类型数值</returns>
            <remarks>[高位 , ... , 低位]</remarks>
        </member>
        <member name="T:Super.Zoo.Framework.FormattedValue">
            <summary>
            格式化值
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.FormattedValue.count">
            <summary>
            格式化器数量
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.FormattedValue.formatters">
            <summary>
            格式化器字典
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.FormattedValue.values">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.FormattedValue.formatter">
            <summary>
            格式化器
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.FormattedValue.OriginalFormat">
            <summary>
            原始格式
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.FormattedValue.#ctor(System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="format">待解析格式字符串</param>
            <param name="args">参数列表</param>
        </member>
        <member name="M:Super.Zoo.Framework.FormattedValue.Create(System.String,System.Object[])">
            <summary>
            创建并返回一个格式化值对象
            </summary>
            <param name="format">待解析格式字符串</param>
            <param name="args">参数列表</param>
            <returns>格式化值对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.FormattedValue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Super.Zoo.Framework.ValueFormatter">
            <summary>
            值格式化器
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.ValueFormatter.NullValue">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.ValueFormatter.FormatDelimiters">
            <summary>
            格式分隔符
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ValueFormatter.OriginalFormat">
            <summary>
            原始格式
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ValueFormatter.TargetFormat">
            <summary>
            目标格式
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ValueFormatter.ValueNames">
            <summary>
            值名称
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ValueFormatter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format">待解析格式字符串</param>
        </member>
        <member name="M:Super.Zoo.Framework.ValueFormatter.FindBraceIndex(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            查找括号索引
            </summary>
            <param name="format">待解析格式字符串</param>
            <param name="brace">括号字符</param>
            <param name="startIndex">起始索引</param>
            <param name="endIndex">结束索引</param>
            <returns>括号索引</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueFormatter.FindIndexOfAny(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            查找字符索引
            </summary>
            <param name="format">待解析格式字符串</param>
            <param name="chars">字符</param>
            <param name="startIndex">起始索引</param>
            <param name="endIndex">结束索引</param>
            <returns>字符索引</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueFormatter.FormatArgument(System.Object)">
            <summary>
            格式化参数
            </summary>
            <param name="value">参数</param>
            <returns>格式参数</returns>
        </member>
        <member name="M:Super.Zoo.Framework.ValueFormatter.Format(System.Object[])">
            <summary>
            格式化
            </summary>
            <param name="values">参数值列表</param>
            <returns>格式化字符串</returns>
        </member>
        <member name="T:Super.Zoo.Framework.IIdentify">
            <summary>
            标识接口
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.IIdentify.Identify">
            <summary>
            内部标识
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.ConsoleLogger">
            <summary>
            控制台日志记录器
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ConsoleLogger.LoggerLevel">
            <summary>
            记录日志等级（默认值: <see cref="F:Super.Zoo.Framework.Logger.LoggerLevel.INFO"/>）
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ConsoleLogger.WriteToConsole">
            <summary>
            输出到控制台（默认值: <see langword="true"/>）
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ConsoleLogger.TimeFormat">
            <summary>
            时间格式（默认值: yyyy/MM/dd HH:mm:ss）
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.PrintMessageToConsole(System.String,Super.Zoo.Framework.Logger.LoggerLevel,System.String)">
            <summary>
            打印消息到控制台
            </summary>
            <param name="type">类型</param>
            <param name="level">日志等级</param>
            <param name="message">日志内容</param>
        </member>
        <member name="E:Super.Zoo.Framework.Logger.ConsoleLogger.WriteLogEvent">
            <summary>
            记录日志信息事件
            </summary>
        </member>
        <member name="E:Super.Zoo.Framework.Logger.ConsoleLogger.WriteTraceEvent">
            <summary> 
            记录跟踪信息事件
            </summary>
        </member>
        <member name="E:Super.Zoo.Framework.Logger.ConsoleLogger.WriteExceptionEvent">
            <summary>
            记录异常信息事件
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.ResigerWriteLogEvent(Super.Zoo.Framework.Logger.WriteLogDelegate)">
            <summary>
            注册记录日志信息事件
            </summary>
            <param name="delegate">记录日志信息委托</param>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.UnResigerWriteLogEvent(Super.Zoo.Framework.Logger.WriteLogDelegate)">
            <summary>
            反注册记录日志信息事件
            </summary>
            <param name="delegate">记录日志信息委托</param>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.ResetWriteLogEvent">
            <summary>
            重置记录日志信息事件
            </summary>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.ResigerWriteTraceEvent(Super.Zoo.Framework.Logger.WriteTraceDelegate)">
            <summary>
            注册记录跟踪信息事件
            </summary>
            <param name="delegate">记录跟踪信息委托</param>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.UnResigerWriteTraceEvent(Super.Zoo.Framework.Logger.WriteTraceDelegate)">
            <summary>
            反注册记录跟踪信息事件
            </summary>
            <param name="delegate">记录跟踪信息委托</param>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.ResetWriteTraceEvent">
            <summary>
            重置记录跟踪信息事件
            </summary>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.ResigerWriteExceptionEvent(Super.Zoo.Framework.Logger.WriteExceptionDelegate)">
            <summary>
            注册记录异常信息事件
            </summary>
            <param name="delegate">记录异常信息委托</param>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.UnResigerWriteExceptionEvent(Super.Zoo.Framework.Logger.WriteExceptionDelegate)">
            <summary>
            反注册记录异常信息事件
            </summary>
            <param name="delegate">记录异常信息委托</param>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.ResetWriteExceptionEvent">
            <summary>
            重置记录异常信息事件
            </summary>
            <returns>基础控制台日志记录器</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.PrintLog(Super.Zoo.Framework.Logger.LoggerLevel,System.String,System.String,System.String)">
            <summary>
            打印日志信息
            </summary>
            <param name="level">日志等级</param>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.PrintLog(Super.Zoo.Framework.Logger.LoggerLevel,System.String,System.String,Super.Zoo.Framework.FormattedValue)">
            <summary>
            打印日志信息
            </summary>
            <param name="level">日志等级</param>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="value">格式化日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Debug(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Debug(System.String,System.String,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Info(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Info(System.String,System.String,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Warn(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Warn(System.String,System.String,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Error(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Error(System.String,System.String,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Fatal(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Fatal(System.String,System.String,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.PrintException(Super.Zoo.Framework.Logger.LoggerLevel,System.String,System.String,System.Exception)">
            <summary>
            打印异常信息到控制台
            </summary>
            <param name="level">日志等级</param>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="exception">错误对象</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Exception(System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.PrintTrace(Super.Zoo.Framework.Logger.LoggerLevel,System.String,System.String,System.Int32,System.String)">
            <summary>
            打印跟踪信息到控制台
            </summary>
            <param name="level">日志等级</param>
            <param name="message">信息内容</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">调用文件行数</param>
            <param name="callerMemberName">调用方法名称</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.Trace(System.String,System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ConsoleLogger.InternalDispose">
            <inheritdoc/>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.WriteExceptionDelegate">
            <summary>
            记录异常信息委托
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="exception">错误对象</param>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.WriteLogDelegate">
            <summary>
            记录日志信息委托
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.WriteTraceDelegate">
            <summary>
            记录跟踪信息委托
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="message">信息内容</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">调用文件行数</param>
            <param name="callerMemberName">调用方法名称</param>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.LoggerLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Logger.LoggerLevel.NONE">
            <summary>
            不记录日志
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Logger.LoggerLevel.FATAL">
            <summary>
            致命等级
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Logger.LoggerLevel.ERROR">
            <summary>
            错误等级
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Logger.LoggerLevel.WARN">
            <summary>
            警告等级
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Logger.LoggerLevel.INFO">
            <summary>
            信息等级
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Logger.LoggerLevel.DEBUG">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.ILogger">
            <summary>
            日志记录器接口
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ILogger.LoggerLevel">
            <summary>
            记录日志等级
            </summary>
        </member>
        <member name="E:Super.Zoo.Framework.Logger.ILogger.WriteTraceEvent">
            <summary> 
            记录跟踪信息事件
            </summary>
        </member>
        <member name="E:Super.Zoo.Framework.Logger.ILogger.WriteLogEvent">
            <summary>
            记录日志信息事件
            </summary>
        </member>
        <member name="E:Super.Zoo.Framework.Logger.ILogger.WriteExceptionEvent">
            <summary>
            记录异常信息事件
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Debug(System.String,System.String,System.String)">
            <summary>
            记录调试日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Debug(System.String,System.String,System.String,System.Object[])">
            <summary>
            记录调试日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
            <param name="args">内容参数</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Info(System.String,System.String,System.String)">
            <summary>
            记录一般日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Info(System.String,System.String,System.String,System.Object[])">
            <summary>
            记录一般日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
            <param name="args">内容参数</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Warn(System.String,System.String,System.String)">
            <summary>
            记录警告日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Warn(System.String,System.String,System.String,System.Object[])">
            <summary>
            记录警告日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
            <param name="args">内容参数</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Error(System.String,System.String,System.String)">
            <summary>
            记录错误日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Error(System.String,System.String,System.String,System.Object[])">
            <summary>
            记录错误日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
            <param name="args">内容参数</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Fatal(System.String,System.String,System.String)">
            <summary>
            记录致命日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Fatal(System.String,System.String,System.String,System.Object[])">
            <summary>
            记录致命日志信息
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="message">日志内容</param>
            <param name="args">内容参数</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Exception(System.String,System.String,System.Exception)">
            <summary>
            记录调试异常信息（日志等级: <see cref="F:Super.Zoo.Framework.Logger.LoggerLevel.ERROR"/>）
            </summary>
            <param name="model">模块名称</param>
            <param name="function">方法名称</param>
            <param name="exception">错误对象</param>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogger.Trace(System.String,System.String,System.Int32,System.String)">
            <summary>
            记录调试跟踪信息（日志等级: <see cref="F:Super.Zoo.Framework.Logger.LoggerLevel.DEBUG"/>）
            </summary>
            <param name="message">信息内容</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">调用文件行数</param>
            <param name="callerMemberName">调用方法名称</param>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.ILogRecord">
            <summary>
            日志记录接口
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ILogRecord.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ILogRecord.OutterLogger">
            <summary>
            使用传入日志记录器
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Logger.ILogRecord.LastError">
            <summary>
            最后一次错误
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Logger.ILogRecord.SetError(System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="error">错误信息</param>
        </member>
        <member name="T:Super.Zoo.Framework.Logger.LoggerManager">
            <summary>
            日志记录器管理器
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.OperateResult">
            <summary>
            操作结果
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.OperateResult.Success">
            <summary>
            操作成功状态
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.OperateResult.Code">
            <summary>
            操作结果代码
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.OperateResult.Message">
            <summary>
            操作结果消息
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.OperateResult.Exception">
            <summary>
            操作结果异常
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.#ctor">
            <summary>
            构造默认操作结果对象 [true, 0, <see cref="F:System.String.Empty"/>]
            </summary>
            <remarks>
            不建议使用构造函数
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.#ctor(System.String)">
            <summary>
            使用消息构造操作结果对象 [true, 0, <paramref name="message"/>]
            </summary>
            <param name="message">操作结果消息</param>
            <remarks>
            不建议使用构造函数
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.#ctor(System.Int32,System.String)">
            <summary>
            使用代码、消息构造操作结果对象 [true, <paramref name="code"/>, <paramref name="message"/>]
            </summary>
            <param name="code">操作结果代码</param>
            <param name="message">操作结果消息</param>
            <remarks>
            不建议使用构造函数
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Succeed">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, "操作成功"]
            </summary>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Succeed(System.String)">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, <paramref name="message"/>]
            </summary>
            <param name="message">结果消息</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Failed">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, "操作失败"]
            </summary>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Failed(System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, <paramref name="errorMessage"/>]
            </summary>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Failed(System.Int32,System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="errorCode"/>, <paramref name="errorMessage"/>]
            </summary>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Excepted(System.Exception)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/>.<see cref="P:System.Exception.HResult"/>, <paramref name="exception"/>.<see cref="P:System.Exception.Message"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Excepted(System.Exception,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/>.<see cref="P:System.Exception.HResult"/>, <paramref name="errorMessage"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Excepted(System.Exception,System.Int32,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="errorCode"/>, <paramref name="errorMessage"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.And(Super.Zoo.Framework.OperateResult)">
            <summary>
            操作结果与操作
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.ThenAnd(System.Func{Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果与操作
            </summary>
            <param name="func">构造操作结果对象方法</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Or(Super.Zoo.Framework.OperateResult)">
            <summary>
            操作结果或操作
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.ThenOr(System.Func{Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult})">
            <summary>
            操作结果或操作
            </summary>
            <param name="func">构造操作结果对象方法</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Then``1(System.Func{Super.Zoo.Framework.OperateResult,``0})">
            <summary>
            连续操作
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="func">执行方法</param>
            <returns>返回值</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.Return">
            <summary>
            归还操作结果对象到操作结果池
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.op_LogicalNot(Super.Zoo.Framework.OperateResult)">
            <summary>
            重载'<see langword="!"/>'操作符
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns></returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.op_True(Super.Zoo.Framework.OperateResult)">
            <summary>
            重载'<see langword="true"/>'操作符
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns></returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult.op_False(Super.Zoo.Framework.OperateResult)">
            <summary>
            重载'<see langword="false"/>'操作符
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns></returns>
        </member>
        <member name="T:Super.Zoo.Framework.OperateResultExtension">
            <summary>
            操作结果扩展方法
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.CopyFrom(Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult)">
            <summary>
            从操作结果中复制以下属性
            <list type="bullet">
                <item>操作结果代码 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/></item>
                <item>操作结果消息 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/></item>
                <item>操作成功状态 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Success"/></item>
                <item>操作结果异常 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/></item>
            </list>
            </summary>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <param name="operateResultSource">待复制操作结果对象</param>
            <returns>操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.CopyFrom``1(Super.Zoo.Framework.OperateResult,Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            从操作结果中复制以下属性
            <list type="bullet">
                <item>操作结果代码 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/></item>
                <item>操作结果消息 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/></item>
                <item>操作成功状态 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Success"/></item>
                <item>操作结果异常 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/></item>
            </list>
            </summary>
            <typeparam name="TFrom">数据类型</typeparam>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <param name="operateResultSource">待复制操作结果对象</param>
            <returns>操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.CopyFrom``1(Super.Zoo.Framework.OperateResult{``0},Super.Zoo.Framework.OperateResult)">
            <summary>
            从操作结果中复制以下属性
            <list type="bullet">
                <item>操作结果代码 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/></item>
                <item>操作结果消息 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/></item>
                <item>操作成功状态 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Success"/></item>
                <item>操作结果异常 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/></item>
            </list>
            </summary>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <param name="operateResultSource">待复制操作结果对象</param>
            <returns>操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.CopyFrom``2(Super.Zoo.Framework.OperateResult{``1},Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            从操作结果中复制以下属性
            <list type="bullet">
                <item>操作结果代码 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/></item>
                <item>操作结果消息 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/></item>
                <item>操作成功状态 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Success"/></item>
                <item>操作结果异常 <paramref name="operateResultSource"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/></item>
            </list>
            </summary>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <param name="operateResultSource">待复制操作结果对象</param>
            <returns>操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.ToOperateResult``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            转换为 <see cref="T:Super.Zoo.Framework.OperateResult"/> 对象
            </summary>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult"/> 对象</returns>
            <remarks>
            <see langword="※ 会回收当前对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.ConvertTo``1(Super.Zoo.Framework.OperateResult,``0)">
            <summary>
            转换为 <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象
            </summary>
            <typeparam name="TTo">数据类型</typeparam>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <param name="data">数据</param>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象</returns>
            <remarks>
            <see langword="※ 会回收当前对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.ConvertTo``2(Super.Zoo.Framework.OperateResult{``0},``1)">
            <summary>
            转换为 <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象
            </summary>
            <typeparam name="TFrom">数据类型</typeparam>
            <typeparam name="TTo">数据类型</typeparam>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <param name="data">数据</param>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象</returns>
            <remarks>
            <see langword="※ 会回收当前对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.ConvertTo``1(Super.Zoo.Framework.OperateResult)">
            <summary>
            转换为 <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象
            </summary>
            <typeparam name="TTo">数据类型</typeparam>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象</returns>
            <remarks>
            <see langword="※ 会回收当前对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.ConvertTo``2(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            转换为 <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象
            </summary>
            <typeparam name="TFrom">数据类型</typeparam>
            <typeparam name="TTo">数据类型</typeparam>
            <param name="operateResult">[THIS] 操作结果对象</param>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象</returns>
            <remarks>
            <see langword="※ 会回收当前对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.AutoRetry``1(System.Func{``0},System.Int32)">
            <summary>
            失败自动重试
            </summary>
            <typeparam name="TOperateResult">操作结果类型</typeparam>
            <param name="function">操作方法</param>
            <param name="retry">重试次数</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.AutoRetry``1(System.Func{``0},System.Int32,System.Int32)">
            <summary>
            失败自动重试
            </summary>
            <typeparam name="TOperateResult">操作结果类型</typeparam>
            <param name="function">操作方法</param>
            <param name="retry">重试次数</param>
            <param name="delay">重试间隔（毫秒）</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.AutoRetryUntil``1(System.Func{``0},System.Predicate{``0},System.Int32)">
            <summary>
            失败自动重试
            </summary>
            <typeparam name="TOperateResult">操作结果类型</typeparam>
            <param name="function">操作方法</param>
            <param name="predicate">判断方法</param>
            <param name="retry">重试次数</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultExtension.AutoRetryUntil``1(System.Func{``0},System.Predicate{``0},System.Int32,System.Int32)">
            <summary>
            失败自动重试
            </summary>
            <typeparam name="TOperateResult">操作结果类型</typeparam>
            <param name="function">操作方法</param>
            <param name="predicate">判断方法</param>
            <param name="retry">重试次数</param>
            <param name="delay">重试间隔（毫秒）</param>
            <returns>操作结果</returns>
        </member>
        <member name="T:Super.Zoo.Framework.OperateResultPool">
            <summary>
            操作结果池
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.OperateResultPool.dictionaryOperation">
            <summary>
            字典操作锁
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.OperateResultPool.resultPool">
            <summary>
            <see cref="T:Super.Zoo.Framework.OperateResult"/> 结果池
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.OperateResultPool.resultTPools">
            <summary>
            <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 结果池字典
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.AddCommonTypes">
            <summary>
            增加常用类型
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.CheckDictionaryType``1">
            <summary>
            检查字典类型
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.GetObject">
            <summary>
            获取 <see cref="T:Super.Zoo.Framework.OperateResult"/> 对象
            </summary>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult"/> 对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.GetObject``1">
            <summary>
            获取 <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象
            </summary>
            <returns><see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.PutObject(Super.Zoo.Framework.OperateResult)">
            <summary>
            归还 <see cref="T:Super.Zoo.Framework.OperateResult"/> 对象
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPool.PutObject``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            归还 <see cref="T:Super.Zoo.Framework.OperateResult`1"/> 对象
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.OperateResultPoolManager">
            <summary>
            操作结果池管理器
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, "操作成功"]
            </summary>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed(System.String)">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, <paramref name="message"/>]
            </summary>
            <param name="message">结果消息</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, "操作失败"]
            </summary>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed(System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, <paramref name="errorMessage"/>]
            </summary>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed(System.Int32,System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="errorCode"/>, <paramref name="errorMessage"/>]
            </summary>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted(System.Exception)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/>.<see cref="P:System.Exception.HResult"/>, <paramref name="exception"/>.<see cref="P:System.Exception.Message"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted(System.Exception,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/>.<see cref="P:System.Exception.HResult"/>, <paramref name="errorMessage"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted(System.Exception,System.Int32,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="errorCode"/>, <paramref name="errorMessage"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed``1(``0)">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, "操作成功", <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed``1(``0,System.String)">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, <paramref name="message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="message">结果消息</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed``1(Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, default]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed``1(``0,Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Succeed``1(``0,Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(``0)">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, "操作失败", <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(``0,System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, <see langword="errorMessage"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(``0,System.Int32,System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <see langword="errorCode"/>, <see langword="errorMessage"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, default]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(``0,Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Failed``1(``0,Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(``0,System.Exception)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/><see cref="P:System.Exception.HResult"/>, <paramref name="exception"/>.<see cref="P:System.Exception.Message"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(``0,System.Exception,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/><see cref="P:System.Exception.HResult"/>, <paramref name="errorMessage"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(``0,System.Exception,System.Int32,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="errorCode"/>, <paramref name="errorMessage"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>] { Exception = <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/> }
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(System.Exception,Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(``0,Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>] { Exception = <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Excepted``1(``0,System.Exception,Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Return(Super.Zoo.Framework.OperateResult)">
            <summary>
            归还操作结果对象
            </summary>
            <param name="obj">操作结果对象</param>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResultPoolManager.Return``1(Super.Zoo.Framework.OperateResult{``0})">
            <summary>
            归还操作结果对象
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="obj">操作结果对象</param>
        </member>
        <member name="T:Super.Zoo.Framework.OperateResult`1">
            <summary>
            带数据的操作结果
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:Super.Zoo.Framework.OperateResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.#ctor(`0)">
            <summary>
            构造默认操作结果对象 [true, 0, <see cref="F:System.String.Empty"/>, <paramref name="data"/>]
            </summary>
            <remarks>
            不建议使用构造函数
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.#ctor(`0,System.String)">
            <summary>
            使用消息构造操作结果对象 [true, 0, <paramref name="message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="message">操作结果消息</param>
            <remarks>
            不建议使用构造函数
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.#ctor(`0,System.Int32,System.String)">
            <summary>
            使用代码、消息构造操作结果对象 [true, <paramref name="code"/>, <paramref name="message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="code">操作结果代码</param>
            <param name="message">操作结果消息</param>
            <remarks>
            不建议使用构造函数
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Succeed(`0)">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, "操作成功", <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Succeed(`0,System.String)">
            <summary>
            创建并返回一个成功操作结果对象 [true, 0, <paramref name="message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="message">结果消息</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Succeed(Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, default]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Succeed(`0,Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Succeed(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Succeed(`0,Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个成功操作结果对象 [true, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>成功操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(`0)">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, "操作失败", <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(`0,System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, -1, <see langword="errorMessage"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(`0,System.Int32,System.String)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <see langword="errorCode"/>, <see langword="errorMessage"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, default]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(`0,Super.Zoo.Framework.OperateResult)">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>]
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Failed(`0,Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个失败操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>]
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>失败操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(`0,System.Exception)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/><see cref="P:System.Exception.HResult"/>, <paramref name="exception"/>.<see cref="P:System.Exception.Message"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(`0,System.Exception,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="exception"/><see cref="P:System.Exception.HResult"/>, <paramref name="errorMessage"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(`0,System.Exception,System.Int32,System.String)">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="errorCode"/>, <paramref name="errorMessage"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <param name="errorCode">错误代码</param>
            <param name="errorMessage">错误消息</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>] { Exception = <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/> }
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(System.Exception,Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult`1.Data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="exception">异常对象</param>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(`0,Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>] { Exception = <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Excepted(`0,System.Exception,Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            创建并返回一个异常操作结果对象 [false, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Code"/>, <paramref name="operateResult"/>.<see cref="P:Super.Zoo.Framework.OperateResult.Message"/>, <paramref name="data"/>] { Exception = <paramref name="exception"/> }
            </summary>
            <param name="data">数据</param>
            <param name="exception">异常对象</param>
            <param name="operateResult">操作结果对象</param>
            <returns>异常操作结果对象</returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.And(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            操作结果与操作
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.ThenAnd(System.Func{Super.Zoo.Framework.OperateResult{`0},Super.Zoo.Framework.OperateResult{`0}})">
            <summary>
            操作结果与操作
            </summary>
            <param name="func">构造操作结果对象方法</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Or(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            操作结果或操作
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.ThenOr(System.Func{Super.Zoo.Framework.OperateResult{`0},Super.Zoo.Framework.OperateResult{`0}})">
            <summary>
            操作结果或操作
            </summary>
            <param name="func">构造操作结果对象方法</param>
            <returns>操作结果对象</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Then``1(System.Func{Super.Zoo.Framework.OperateResult{`0},``0})">
            <summary>
            连续操作
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="func">执行方法</param>
            <returns>返回值</returns>
            <remarks>
            <see langword="※ 会回收未返回对象 ※"/>
            </remarks>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.Return">
            <summary>
            归还操作结果对象到操作结果池
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.op_LogicalNot(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            重载'<see langword="!"/>'操作符
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns></returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.op_True(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            重载'<see langword="true"/>'操作符
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns></returns>
        </member>
        <member name="M:Super.Zoo.Framework.OperateResult`1.op_False(Super.Zoo.Framework.OperateResult{`0})">
            <summary>
            重载'<see langword="false"/>'操作符
            </summary>
            <param name="operateResult">操作结果对象</param>
            <returns></returns>
        </member>
        <member name="T:Super.Zoo.Framework.ObjectPool`1">
            <summary>
            对象池
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:Super.Zoo.Framework.ObjectPool`1.objectCreater">
            <summary>
            对象构造器
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.ObjectPool`1.objectCapacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.ObjectPool`1.objectCollection">
            <summary>
            对象集合
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ObjectPool`1.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.ObjectPool`1.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            构造函数 [Creater: <paramref name="creater"/>, Capacity: 512]
            </summary>
            <param name="creater">构造器</param>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            构造函数 [Creater:<paramref name="creater"/>, Capacity:<paramref name="capacity"/>]
            </summary>
            <param name="creater">构造器</param>
            <param name="capacity">容量</param>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectPool`1.GetObject">
            <summary>
            获得对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Super.Zoo.Framework.ObjectPool`1.PutObject(`0)">
            <summary>
            归还对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Super.Zoo.Framework.Version.VersionType">
            <summary>
            版本类型
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Version.VersionType.Alpha">
            <summary>
            Alpha 版本
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Version.VersionType.Beta">
            <summary>
            Beta 版本
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Version.VersionType.Trial">
            <summary>
            试用版本
            </summary>
        </member>
        <member name="F:Super.Zoo.Framework.Version.VersionType.Release">
            <summary>
            发布版本
            </summary>
        </member>
        <member name="T:Super.Zoo.Framework.Version.VersionTypeExtension">
            <summary>
            版本类型扩展方法
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Version.VersionTypeExtension.GetIdentifier(Super.Zoo.Framework.Version.VersionType)">
            <summary>
            获取版本类型标识
            </summary>
            <param name="versionType">[THIS] 版本类型</param>
            <returns>版本类型标识</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">版本类型异常</exception>
        </member>
        <member name="T:Super.Zoo.Framework.Version.VersionObject">
            <summary>
            版本信息对象
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.BuildVersion">
            <summary>
            构建版本号（yyyyYnnnImmm）
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.FullVersion">
            <summary>
            完整版本号（Va.b yyyyYnnnImmm）
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.YearVersion">
            <summary>
            年度版本
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.VersionType">
            <summary>
            项目版本类型
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.TypeVersion">
            <summary>
            类型版本
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.Assembly">
            <summary>
            程序集 
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Version.VersionObject.UpdateRecordFile">
            <summary>
            更新日志文件 
            </summary>
        </member>
        <member name="M:Super.Zoo.Framework.Version.VersionObject.GetVersionInfo">
            <summary>
            获得版本信息
            </summary>
            <returns>版本信息</returns>
        </member>
        <member name="M:Super.Zoo.Framework.Version.VersionObject.GetUpdateRecord">
            <summary>
            获取更新日志
            </summary>
            <returns>更新日志</returns>
        </member>
        <member name="T:Super.Zoo.Framework.Internal.ProjectVersion">
            <summary>
            项目版本信息
            </summary>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.Version">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.UpdateTime">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.YearVersion">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.VersionType">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.TypeVersion">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Super.Zoo.Framework.Internal.ProjectVersion.UpdateRecordFile">
            <inheritdoc/>
        </member>
        <member name="T:Piggy.Framework.HighResolutionSleep">
            <summary>
            高精度延时
            </summary>
        </member>
        <member name="M:Piggy.Framework.HighResolutionSleep.Sleep(System.UInt32)">
            <summary>
            延时
            </summary>
            <param name="milliseconds">延时时长（毫秒）</param>
        </member>
        <member name="T:Piggy.Framework.NativeMethods">
            <summary>
            Windows 导入函数
            </summary>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.WritePrivateProfileString(System.Byte[],System.Byte[],System.Byte[],System.String)">
            <summary>
            写入配置文件
            </summary>
            <param name="section">[IN] 节点名称（比如: [<see langword="CONFIG"/>]）</param>
            <param name="key">[IN] 键名（若此参数为 <see langword="null"/>，则删除整节点）（比如: <see langword="KEY"/>=VALUE）</param>
            <param name="value">[IN] 键值（若此参数为 <see langword="null"/>，则删除整个键值）（比如: KEY=<see langword="VALUE"/>）</param>
            <param name="filePath">[IN] 文件路径</param>
            <returns>返回值（若执行成功，则返回非 0 值）</returns>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.GetPrivateProfileString(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Int32,System.String)">
            <summary>
            读取配置文件，获取键值字符串
            </summary>
            <param name="section">[IN] 节点名称（比如: [<see langword="CONFIG"/>]）</param>
            <param name="key">[IN] 键名（若此参数为 <see langword="null"/>，则删除整节点）（比如: <see langword="KEY"/>=VALUE）</param>
            <param name="defValue">[IN] 默认值</param>
            <param name="retValue">[OUT] 缓冲区（接收读取值）</param>
            <param name="size">[IN] 缓冲区大小</param>
            <param name="filePath">[IN] 文件路径</param>
            <returns>复制到缓冲区的字符数</returns>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.GetPrivateProfileSection(System.Byte[],System.Byte[],System.Int32,System.String)">
            <summary>
            读取配置文件，获取节点下面的所有键名和键值
            </summary>
            <param name="section">[IN] 节点名称（比如: [<see langword="CONFIG"/>]）</param>
            <param name="retValue">[OUT] 缓冲区（接收读取值）</param>
            <param name="size">[IN] 缓冲区大小</param>
            <param name="filePath">[IN] 文件路径</param>
            <returns>复制到缓冲区的字符数</returns>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.GetPrivateProfileSectionNames(System.Byte[],System.Int32,System.String)">
            <summary>
            读取配置文件，获取文件中所有节点
            </summary>
            <param name="retValue">[OUT] 缓冲区（接收读取值）</param>
            <param name="size">[IN] 缓冲区大小</param>
            <param name="filePath">[IN] 文件路径</param>
            <returns>复制到缓冲区的字符数</returns>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.NtSetTimerResolution(System.Int32,System.Boolean,System.Int32@)">
            <summary>
            设置系统定时器分辨率
            </summary>
            <param name="desiredResolution">[IN] 所需定时器分辨率（毫秒）</param>
            <param name="setResolution">
            <para>[IN] 是否同时设置系统范围的分辨率</para>
                <list type="table">
                    <item>
                        <term><see langword="true"/></term>
                        <description>设置系统范围内的分辨率</description>
                    </item>
                    <item>
                        <term><see langword="false"/></term>
                        <description>设置当前进程内的分辨率</description>
                    </item>
                </list>
            </param>
            <param name="actualResolution">[OUT] 系统当前定时器分辨率（毫秒）</param>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.NtQueryTimerResolution(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            查询系统定时器分辨率
            </summary>
            <param name="minimumResolution">[OUT] 最小可用的定时器分辨率（毫秒）</param>
            <param name="maximumResolution">[OUT] 最大可用的定时器分辨率（毫秒）</param>
            <param name="preferredResolution">[OUT] 系统推荐的定时器分辨率（毫秒）</param>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.Sleep(System.UInt32)">
            <summary>
            延时
            </summary>
            <param name="milliseconds">[IN] 延时时长（毫秒）</param>
        </member>
        <member name="M:Piggy.Framework.NativeMethods.IsDebuggerPresent">
            <summary>
            调试模式状态
            </summary>
            <returns>是否被调试器附加</returns>
        </member>
        <member name="T:Force.DeepCloner.DeepClonerExtension">
            <summary>
            Extensions for object cloning
            </summary>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtension.DeepClone``1(``0)">
            <summary>
            Performs deep (full) copy of object and related graph
            </summary>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtension.DeepCloneTo``2(``0,``1)">
            <summary>
            Performs deep (full) copy of object and related graph to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtension.ShallowCloneTo``2(``0,``1)">
            <summary>
            Performs shallow copy of object to existing object
            </summary>
            <returns>existing filled object</returns>
            <remarks>Method is valid only for classes, classes should be descendants in reality, not in declaration</remarks>
        </member>
        <member name="M:Force.DeepCloner.DeepClonerExtension.ShallowClone``1(``0)">
            <summary>
            Performs shallow (only new object returned, without cloning of dependencies) copy of object
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.DeepClonerCache.ClearCache">
            <summary>
            This method can be used when we switch between safe / unsafe variants (for testing)
            </summary>
        </member>
        <member name="T:Force.DeepCloner.Helpers.DeepClonerSafeTypes">
            <summary>
            Safe types are types, which can be copied without real cloning. e.g. simple structs or strings (it is immutable)
            </summary>
        </member>
        <member name="T:Force.DeepCloner.Helpers.ShallowObjectCloner">
            <summary>
            Internal class but due implementation restriction should be public
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.ShallowObjectCloner.DoCloneObject(System.Object)">
            <summary>
            Abstract method for real object cloning
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.ShallowObjectCloner.CloneObject(System.Object)">
            <summary>
            Performs real shallow object clone
            </summary>
        </member>
        <member name="M:Force.DeepCloner.Helpers.ShallowObjectCloner.SwitchTo(System.Boolean)">
            <summary>
            Purpose of this method is testing variants
            </summary>
        </member>
    </members>
</doc>
